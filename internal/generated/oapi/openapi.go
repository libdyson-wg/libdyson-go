// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"2fo7JQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
