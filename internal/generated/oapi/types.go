// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package oapi

import (
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerScopes = "bearer.Scopes"
)

// Defines values for CapabilityString.
const (
	AdvanceOscillationDay1 CapabilityString = "AdvanceOscillationDay1"
	ChangeWifi             CapabilityString = "ChangeWifi"
	EnvironmentalData      CapabilityString = "EnvironmentalData"
	ExtendedAQ             CapabilityString = "ExtendedAQ"
	Scheduling             CapabilityString = "Scheduling"
)

// Defines values for DeviceCategory.
const (
	Ec       DeviceCategory = "ec"
	Flrc     DeviceCategory = "flrc"
	Hc       DeviceCategory = "hc"
	Light    DeviceCategory = "light"
	Robot    DeviceCategory = "robot"
	Wearable DeviceCategory = "wearable"
)

// Defines values for DeviceConnectionCategory.
const (
	LecAndWifi   DeviceConnectionCategory = "lecAndWifi"
	LecOnly      DeviceConnectionCategory = "lecOnly"
	NonConnected DeviceConnectionCategory = "nonConnected"
	WifiOnly     DeviceConnectionCategory = "wifiOnly"
)

// Defines values for LoginInformationTokenType.
const (
	Bearer LoginInformationTokenType = "Bearer"
)

// Defines values for MQTTRemoteBrokerType.
const (
	Wss MQTTRemoteBrokerType = "wss"
)

// Defines values for UserStatusAccountStatus.
const (
	ACTIVE       UserStatusAccountStatus = "ACTIVE"
	UNREGISTERED UserStatusAccountStatus = "UNREGISTERED"
)

// Defines values for UserStatusAuthenticationMethod.
const (
	EMAILPWD2FA UserStatusAuthenticationMethod = "EMAIL_PWD_2FA"
)

// CapabilityString defines model for CapabilityString.
type CapabilityString string

// ConnectedConfiguration defines model for ConnectedConfiguration.
type ConnectedConfiguration struct {
	Firmware Firmware `json:"firmware"`
	Mqtt     MQTT     `json:"mqtt"`
}

// Device defines model for Device.
type Device struct {
	Category               DeviceCategory           `json:"category"`
	ConnectedConfiguration ConnectedConfiguration   `json:"connectedConfiguration"`
	ConnectionCategory     DeviceConnectionCategory `json:"connectionCategory"`
	Model                  string                   `json:"model"`
	Name                   string                   `json:"name"`
	SerialNumber           string                   `json:"serialNumber"`
	Type                   string                   `json:"type"`
	Variant                *string                  `json:"variant,omitempty"`
}

// DeviceCategory defines model for Device.Category.
type DeviceCategory string

// DeviceConnectionCategory defines model for Device.ConnectionCategory.
type DeviceConnectionCategory string

// Firmware defines model for Firmware.
type Firmware struct {
	AutoUpdateEnabled bool                `json:"autoUpdateEnabled"`
	Capabilities      *[]CapabilityString `json:"capabilities,omitempty"`
}

// IoTCredentials defines model for IoTCredentials.
type IoTCredentials struct {
	ClientId             openapi_types.UUID `json:"ClientId"`
	CustomAuthorizerName string             `json:"CustomAuthorizerName"`
	TokenKey             string             `json:"TokenKey"`
	TokenSignature       string             `json:"TokenSignature"`
	TokenValue           openapi_types.UUID `json:"TokenValue"`
}

// IoTData defines model for IoTData.
type IoTData struct {
	Endpoint       string         `json:"Endpoint"`
	IoTCredentials IoTCredentials `json:"IoTCredentials"`
}

// LoginChallenge defines model for LoginChallenge.
type LoginChallenge struct {
	ChallengeId openapi_types.UUID `json:"challengeId"`
}

// LoginInformation defines model for LoginInformation.
type LoginInformation struct {
	Account   openapi_types.UUID        `json:"account"`
	Token     string                    `json:"token"`
	TokenType LoginInformationTokenType `json:"tokenType"`
}

// LoginInformationTokenType defines model for LoginInformation.TokenType.
type LoginInformationTokenType string

// MQTT defines model for MQTT.
type MQTT struct {
	LocalBrokerCredentials string               `json:"localBrokerCredentials"`
	MqttRootTopicLevel     string               `json:"mqttRootTopicLevel"`
	RemoteBrokerType       MQTTRemoteBrokerType `json:"remoteBrokerType"`
}

// MQTTRemoteBrokerType defines model for MQTT.RemoteBrokerType.
type MQTTRemoteBrokerType string

// UserStatus defines model for UserStatus.
type UserStatus struct {
	AccountStatus        UserStatusAccountStatus        `json:"accountStatus"`
	AuthenticationMethod UserStatusAuthenticationMethod `json:"authenticationMethod"`
}

// UserStatusAccountStatus defines model for UserStatus.AccountStatus.
type UserStatusAccountStatus string

// UserStatusAuthenticationMethod defines model for UserStatus.AuthenticationMethod.
type UserStatusAuthenticationMethod string

// PathCountry defines model for PathCountry.
type PathCountry = string

// PathCulture defines model for PathCulture.
type PathCulture = string

// UserAgent defines model for UserAgent.
type UserAgent = string

// Devices defines model for Devices.
type Devices = []Device

// LoginComplete defines model for LoginComplete.
type LoginComplete = LoginInformation

// Provision defines model for Provision.
type Provision = string

// BeginLoginRequest defines model for BeginLoginRequest.
type BeginLoginRequest struct {
	// Email An email address
	Email openapi_types.Email `json:"email"`
}

// CompleteLoginRequest defines model for CompleteLoginRequest.
type CompleteLoginRequest struct {
	ChallengeId openapi_types.UUID  `json:"challengeId"`
	Email       openapi_types.Email `json:"email"`
	OtpCode     string              `json:"otpCode"`
	Password    string              `json:"password"`
}

// IoTDataRequest defines model for IoTDataRequest.
type IoTDataRequest struct {
	// Serial A serial number
	Serial string `json:"Serial"`
}

// UserStatusRequest defines model for UserStatusRequest.
type UserStatusRequest struct {
	// Email An email address
	Email openapi_types.Email `json:"email"`
}

// GetIoTInfoJSONBody defines parameters for GetIoTInfo.
type GetIoTInfoJSONBody struct {
	// Serial A serial number
	Serial string `json:"Serial"`
}

// BeginLoginJSONBody defines parameters for BeginLogin.
type BeginLoginJSONBody struct {
	// Email An email address
	Email openapi_types.Email `json:"email"`
}

// BeginLoginParams defines parameters for BeginLogin.
type BeginLoginParams struct {
	// Country A 2-digit country code, assumed to be ISO 3166-1 alpha-2
	Country *PathCountry `form:"country,omitempty" json:"country,omitempty"`

	// Culture A locale/language, assumed to be IETF language code
	Culture   *PathCulture `form:"culture,omitempty" json:"culture,omitempty"`
	UserAgent UserAgent    `json:"User-Agent"`
}

// GetUserStatusJSONBody defines parameters for GetUserStatus.
type GetUserStatusJSONBody struct {
	// Email An email address
	Email openapi_types.Email `json:"email"`
}

// GetUserStatusParams defines parameters for GetUserStatus.
type GetUserStatusParams struct {
	// Country A 2-digit country code, assumed to be ISO 3166-1 alpha-2
	Country   *PathCountry `form:"country,omitempty" json:"country,omitempty"`
	UserAgent UserAgent    `json:"User-Agent"`
}

// CompleteLoginJSONBody defines parameters for CompleteLogin.
type CompleteLoginJSONBody struct {
	ChallengeId openapi_types.UUID  `json:"challengeId"`
	Email       openapi_types.Email `json:"email"`
	OtpCode     string              `json:"otpCode"`
	Password    string              `json:"password"`
}

// CompleteLoginParams defines parameters for CompleteLogin.
type CompleteLoginParams struct {
	// Country A 2-digit country code, assumed to be ISO 3166-1 alpha-2
	Country *PathCountry `form:"country,omitempty" json:"country,omitempty"`

	// Culture A locale/language, assumed to be IETF language code
	Culture   *PathCulture `form:"culture,omitempty" json:"culture,omitempty"`
	UserAgent UserAgent    `json:"User-Agent"`
}

// GetIoTInfoJSONRequestBody defines body for GetIoTInfo for application/json ContentType.
type GetIoTInfoJSONRequestBody GetIoTInfoJSONBody

// BeginLoginJSONRequestBody defines body for BeginLogin for application/json ContentType.
type BeginLoginJSONRequestBody BeginLoginJSONBody

// GetUserStatusJSONRequestBody defines body for GetUserStatus for application/json ContentType.
type GetUserStatusJSONRequestBody GetUserStatusJSONBody

// CompleteLoginJSONRequestBody defines body for CompleteLogin for application/json ContentType.
type CompleteLoginJSONRequestBody CompleteLoginJSONBody
